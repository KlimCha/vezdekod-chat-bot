<?php
// –≤—ã–≤–æ–¥–∏–º –≤—Å–µ –æ—à–∏–±–∫–∏ –¥–ª—è –¥–µ–±–∞–≥–∞ :)
ini_set('error_reporting', E_ALL);
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
ini_set('memory_limit', '-1');
header('Access-Control-Allow-Origin: *');
header("Content-type: application/json; charset=utf-8");
ini_set("log_errors", 1);
ini_set("error_log", "index.txt"); // –Ω—É –∏ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∫–æ–Ω–µ—á–Ω–æ –∂–µ :)

include("base/base.php");
require_once('vendor/autoload.php');

use DigitalStar\vk_api\vk_api;

$vk_api_version = "5.131";
$token = "–¢–û–ö–ï–ù";
$group_id = 212559159;

if (!isset($_GET['a']) || $_GET['a'] == "") { // –°—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—É—é –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —Å–µ—Ä–≤–µ—Ä —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –≥–µ—Ç-–∑–∞–ø—Ä–æ—Å–µ, –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ 'a', –∏–±–æ —Ç–∞–∫ –ø—Ä–æ—â–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å —Å–µ—Ä–≤–µ—Ä, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ :)
    exit('There is no parameter "a".');
}

$emoji_mem = ["&#128569;", "&#128568;", "&#129315;", "&#128517;", "&#129315;", "&#128518;", "&#128515;", "&#129303;"];
$text_mem = ["–£–≥–∞—Ä–∞–π!", "–°–º–µ—à–Ω–æ, —Ä–µ–∞–ª—å–Ω–æ?", "–ê—Ö–∞—Ö–∞—Ö–∞—Ö–∞–∞—Ö", "–û–π, —É–º–æ—Ä–∞!", "–°–º–æ—Ç—Ä–∏ —Å–æ —Å—Ç—É–ª–∞ –Ω–µ —É–ø–∞–¥–∏!", "–•–ê–•–ê–•–ê–•–ê–•–ê–•–ê–•–ê–ê–•", "–°–µ–π—á–∞—Å —É–º—Ä—É —Å–æ —Å–º–µ—Ö–∞!"];

$text_q_1 = ["–û—Ç–∫—É–¥–∞ —Ç—ã –∑–Ω–∞–µ—à—å?ü§î ", "üòé –í–µ—Ä–Ω–æ!", "–î–∞-–¥–∞, –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞! üòª", "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! ü•≥", "ü•≥ –û–≥–æ–Ω—å, –≤–µ—Ä–Ω–æ!", "–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç! ü§™"];
$text_q_0 = ["ü§î –ü–æ—á–µ–º—É —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å? –≠—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ", "üôÅ –ù–µ–≤–µ—Ä–Ω–æ!", "üò•–ù–µ—Ç, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!", "üò¨ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!", "üòø –ù–µ—Ç, –Ω–µ–≤–µ—Ä–Ω–æ!", "–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç!", "üòï –ù–µ–≤–µ—Ä–Ω–æ! –ù—É –Ω–∏—á–µ–≥–æ, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑—ë—Ç!"];

$data2 = json_decode(file_get_contents('php://input'));

$secret = "jRmpA4SBjnYsheTPb5vKBofe6"; // –¥–ª—è –ª—É—á—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –∑–∞–±—ã–≤–∞–µ–º –ø—Ä–æ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥

if (!isset($data2->secret) || $data2->secret != $secret) die("Invalid secret_key."); // –ø—Ä–æ–≤–µ—Ä–æ—á–∫–∞ ‚Ññ1
if (!isset($data2->group_id) || !isset($group_id)) die("Incorrect group_id."); // –ø—Ä–æ–≤–µ—Ä–æ—á–∫–∞ ‚Ññ2


$vk = vk_api::create($token, $vk_api_version)->setConfirm($_GET['a']); // –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è

$vk->debug();
$vk->initVars($id, $message_text, $payload, $user_id, $type, $data);

echo "ok";

if (!R::testConnection()) {
    $vk->reply("–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö!"); // –Ω—É —ç—Ç–æ —Ç–∞–∫, –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π. –ù—É –∞ –≤–¥—Ä—É–≥! =)
    exit;
}

$keyboard_clean = json_encode(["buttons" => [], "one_time" => true]); // —á–∏—Å—Ç–∞—è –∫–ª–∞–≤–∞


$button_stat = $vk->buttonText('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'green');
$button_answer = $vk->buttonText('–í–æ–ø—Ä–æ—Å—ã', 'white');
$button_hi = $vk->buttonText('–ü—Ä–∏–≤–µ—Ç', 'white');
$button_mem = $vk->buttonText('–ú–µ–º', 'red');
$button_down = $vk->buttonText('–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–π –º–µ–º', 'blue');

$keyboard_menu = $vk->generateKeyboard([[$button_hi, $button_answer], [$button_stat, $button_mem], [$button_down]], false);
$keyboard_menu_hi = $vk->generateKeyboard([[$button_hi]], false);
$button_stop_q = $vk->buttonText('–•–≤–∞—Ç–∏—Ç –≤–æ–ø—Ä–æ—Å–∏–∫–æ–≤', 'red');
$keyboard_menu_stop_q = $vk->generateKeyboard([[$button_stop_q]], false);

$time = date("H:i:s"); // –ø—É—Å–∫–∞—è –±—É–¥–µ—Ç –≤—Ä–µ–º—è, –≤–¥—Ä—É–≥ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è :)

if ($type == "message_event") {
    $user_id = $data2->object->user_id;
    $user = regUser($user_id);
    $peer_id = $data2->object->peer_id;
    $event_id = $data2->object->event_id;
    $payload = $data2->object->payload;
    $conversation_message_id = $data2->object->conversation_message_id;

    if (isset($payload->command)) {
        // $payload = (object) $payload; // –º–∞—Å—Å–∏–≤ –≤ –æ–±—ä–µ–∫—Ç –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º, —á—Ç–æ–±—ã –±—ã–ª–æ –∫—Ä–∞—Å–∏–≤–æ)
        // $vk->reply(print_r($payload, 1));
        if (isset($payload->id) && isset($payload->command) && isset($payload->q) && $payload->command == "–æ—Ç–≤–µ—Ç") return question($payload, [$peer_id, $user_id, $event_id]);
        if (isset($payload->id)) {
            $messages_getByConversationMessageId = $vk->request("messages.getByConversationMessageId", [
                "peer_id" => $peer_id,
                "conversation_message_ids" => $conversation_message_id,
                "extended" => 1
            ]);
            // $vk->sendMessage($peer_id, print_r($messages_getByConversationMessageId["items"][0]["attachments"][0], 1));
            $attach = $messages_getByConversationMessageId["items"][0]["attachments"][0]["photo"];
            unset($attach["sizes"]);
            // $vk->sendMessage($peer_id, print_r($attach, 1));
            $attach_photo = "photo" . $attach["owner_id"] . "_" . $attach["id"] . "_" . $attach["access_key"];
            $text_message = $messages_getByConversationMessageId["items"][0]["text"];
            if ($payload->command == "like_mem") {
                $findBeswMemUser = R::findOne("memsuser", "id = ? AND vk_id = ?", [$payload->id, $user_id]);
                if ($findBeswMemUser == null) {
                    eventAnswerSnackbar($event_id, $peer_id, $user_id, "‚ùó –ü–æ—Ö–æ–∂–µ, –í—ã —Ç—ã–∫–Ω—É–ª–∏ –Ω–µ –Ω–∞ —Ç—É –∫–Ω–æ–ø–æ—á–∫—É.");
                } else {
                    if ($findBeswMemUser->vote == 1) {
                        eventAnswerSnackbar($event_id, $peer_id, $user_id, "‚ùó –í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω—ã–π –º–µ–º &#128077;");
                    } else if ($findBeswMemUser->vote == -1) {
                        eventAnswerSnackbar($event_id, $peer_id, $user_id, "‚ùó –í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω—ã–π –º–µ–º &#128078;");
                    } else {
                        $findBaseMem = R::findOne("mems", "mem_file = ?", [$findBeswMemUser->mem_file]);
                        $findBaseMem->like = $findBaseMem->like + 1;
                        $findBaseMem->date_update = date('Y-m-d H:i:s');
                        R::store($findBaseMem);

                        $findBeswMemUser->vote = 1;
                        $findBeswMemUser->date_update = date('Y-m-d H:i:s');
                        R::store($findBeswMemUser);
                        eventAnswerSnackbar($event_id, $peer_id, $user_id, "‚úÖ –õ–∞–π–∫ –∑–∞—á—Ç—ë–Ω! &#128077;");
                        $messages_edit = $vk->request("messages.edit", [
                            "message" => "{$text_message}\n\n–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: &#128077;",
                            "peer_id" => $peer_id,
                            "conversation_message_id" => $conversation_message_id,
                            "dont_parse_links" => 1,
                            "disable_mentions" => 1,
                            "attachment" => $attach_photo,
                        ]);
                    }
                }
            } else if ($payload->command == "dislike_mem") {
                $findBeswMemUser = R::findOne("memsuser", "id = ? AND vk_id = ?", [$payload->id, $user_id]);
                if ($findBeswMemUser == null) {
                    eventAnswerSnackbar($event_id, $peer_id, $user_id, "‚ùó –ü–æ—Ö–æ–∂–µ, –í—ã —Ç—ã–∫–Ω—É–ª–∏ –Ω–µ –Ω–∞ —Ç—É –∫–Ω–æ–ø–æ—á–∫—É.");
                } else {
                    if ($findBeswMemUser->vote == 1) {
                        eventAnswerSnackbar($event_id, $peer_id, $user_id, "‚ùó –í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω—ã–π –º–µ–º &#128077;");
                    } else if ($findBeswMemUser->vote == -1) {
                        eventAnswerSnackbar($event_id, $peer_id, $user_id, "‚ùó –í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω—ã–π –º–µ–º &#128078;");
                    } else {
                        $findBaseMem = R::findOne("mems", "mem_file = ?", [$findBeswMemUser->mem_file]);
                        $findBaseMem->dislike = $findBaseMem->dislike + 1;
                        $findBaseMem->date_update = date('Y-m-d H:i:s');
                        R::store($findBaseMem);

                        $findBeswMemUser->vote = -1;
                        $findBeswMemUser->date_update = date('Y-m-d H:i:s');
                        R::store($findBeswMemUser);
                        eventAnswerSnackbar($event_id, $peer_id, $user_id, "‚úÖ –î–∏–∑–ª–∞–π–∫ –∑–∞—Å—á–∏—Ç–∞–Ω! &#128078;");
                        $messages_edit = $vk->request("messages.edit", [
                            "message" => "{$text_message}\n\n–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: &#128078;",
                            "peer_id" => $peer_id,
                            "conversation_message_id" => $conversation_message_id,
                            "dont_parse_links" => 1,
                            "disable_mentions" => 1,
                            "attachment" => $attach_photo,
                        ]);
                    }
                }
            }
        }
    }
}


if ($type == "message_new") {
    $peer_id = $id; // peer_id
    $message = mb_strtolower($message_text, 'utf-8'); // —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—Ä–æ—Å—Ç–æ–º –≤–∏–¥–µ, –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞

    if ($user_id <= 0) exit(); // –µ—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–ª–∞ –≥—Ä—É–ø–ø–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —á–∞—Ç–µ) ‚Äî –ø–æ—Å—ã–ª–∞–µ–º!

    $user = regUser($user_id); // —Ä–µ–≥–∞–µ–º —é–∑–µ—Ä–∞ –≤ –±–∞–∑–µ (–∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω—ë–º)

    if (in_array($message, ["–ø—Ä–∏–≤–µ—Ç"])) {
        $vk->reply("–ü—Ä–∏–≤–µ—Ç –≤–µ–∑–¥–µ–∫–æ–¥–µ—Ä–∞–º!", ["keyboard" => $keyboard_menu]);
    } else if (in_array($message, ["—Ö–≤–∞—Ç–∏—Ç", "—Ö–≤–∞—Ç–∏—Ç –≤–æ–ø—Ä–æ—Å–∏–∫–æ–≤"])) {
        $vk->reply("–õ–∞–¥–Ω–æ-–ª–∞–¥–Ω–æ. –¢–∞–∫ —É–∂ –∏ –±—ã—Ç—å =)", ["keyboard" => $keyboard_menu]);
    } else if (in_array($message, ["–º–µ–º"])) {
        // –ü–†–û–í–ï–†–ö–ê –ù–ê –ú–ï–ú!
        try {
            $base_mem_user = 1;
            $photos = array_diff(scandir("photos"), array('..', '.'));
            while ($base_mem_user == 1) {
                $mem_file = $photos[rand(0, count($photos) - 1)];
                $mem = dirname(__FILE__) . '/photos/' . $mem_file;
                $check_mem = R::findOne("memsuser", "vk_id = ? AND mem = ?", [$user_id, $mem_file]);
                if ($check_mem != null && (in_array($check_mem->vote, [-1, 1]))) {
                    $base_mem_user = 1;
                } else {
                    $base_mem_user = 0;
                }
            }
            $upload_file = $vk->uploadImage($user_id, $mem); // –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤–∫
            // –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –ë–ê–ó–ê –î–õ–Ø –ú–ï–ú–û–í!
            $findBaseMem = R::findOne("mems", "mem_file = ?", [$mem_file]);
            if ($findBaseMem == null) {
                $newMem = R::dispense("mems");
                $newMem->mem_file = $mem_file;
                $newMem->like = 0; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤
                $newMem->dislike = 0;
                $newMem->date_create = date('Y-m-d H:i:s');
                $newMem->date_update = date('Y-m-d H:i:s');
                R::store($newMem);
                $findBaseMem = $newMem;
            }
            if ($check_mem == null) {
                $newMemUser = R::dispense("memsuser");
                $newMemUser->vk_id = $user_id;
                $newMemUser->mem_file = $mem_file;
                $newMemUser->vote = 0; // 0 - –±–µ–∑ –≥–æ–ª–æ—Å–∞, 1 - –ª–∞–π–∫, -1 - –¥–∏–∑
                $newMemUser->date_create = date('Y-m-d H:i:s');
                $newMemUser->date_update = date('Y-m-d H:i:s');
                R::store($newMemUser);
                $check_mem = $newMemUser;
            } else {
                $check_mem->date_update = date('Y-m-d H:i:s');
                R::store($check_mem);
            }
            if (isset($upload_file[0]) && isset($upload_file[0]["id"])) {
                $button_mem_like = $vk->buttonCallback("&#128077;", "green", ["command" => "like_mem", "id" => $check_mem->id]);
                $button_mem_dislike = $vk->buttonCallback("&#128078;", "red", ["command" => "dislike_mem", "id" => $check_mem->id]);
                $keyboard_like_mem = $vk->generateKeyboard([[$button_mem_like, $button_mem_dislike]], true);
                $text_message_mem = $emoji_mem[array_rand($emoji_mem)] . " " . $text_mem[array_rand($text_mem)];
                $vk->reply($text_message_mem, ["attachment" => "photo" . $upload_file[0]['owner_id'] . "_" . $upload_file[0]['id'], "keyboard" => $keyboard_like_mem]);
            } else {
                $vk->reply("‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–ë–û–ß–ö–ê :(\n–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É –µ—â—ë —Ä–∞–∑–æ–∫!", ["keyboard" => $keyboard_menu]);
            }
        } catch (Exception $ex) {
            //–í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏–∏.
            // echo $ex->getMessage();
            $vk->reply("&#9940; –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ :(\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É.");
            $vk->reply($ex->getMessage());
        }
    } else if (in_array($message, ["–≤–æ–ø—Ä–æ—Å—ã"])) {
        $button_ans_1 = $vk->buttonText('–û—Ç–ª–∏—á–Ω–æ', 'green', ["command" => "–æ—Ç–≤–µ—Ç", "q" => true, "id" => 1]);
        $button_ans_2 = $vk->buttonText('–•–æ—Ä–æ—à–æ', 'blue', ["command" => "–æ—Ç–≤–µ—Ç", "q" => true, "id" => 1]);
        $button_ans_3 = $vk->buttonText('–ü–æ-–í–µ–∑–¥–µ–∫–æ–¥–µ—Ä—Å–∫–∏', 'white', ["command" => "–æ—Ç–≤–µ—Ç", "q" => true, "id" => 1]);
        $button_ans_4 = $vk->buttonText('–ú–æ—â–Ω–æ!', 'red', ["command" => "–æ—Ç–≤–µ—Ç", "q" => true, "id" => 1]);

        $keyboard_ans = $vk->generateKeyboard([[$button_ans_1, $button_ans_2], [$button_ans_3, $button_ans_4], [$button_hi]], true);

        $vk->reply("–ù—É-—Å, –Ω–∞—á–Ω—ë–º!", ["keyboard" => $keyboard_menu_stop_q]);
        $vk->reply("1. –ö–∞–∫ –¥–µ–ª–∞?", ["keyboard" => $keyboard_ans]);
    } else if (in_array($message, ["—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])) {
        $countAllMemUser = R::count("memsuser", "vk_id = ?", [$user_id]);
        $countLikeMemUser = R::count("memsuser", "vk_id = ? AND vote = 1", [$user_id]);
        $countDisLikeMemUser = R::count("memsuser", "vk_id = ? AND vote = -1", [$user_id]);

        $allMemsGlobal = R::findAll("mems", "ORDER BY `mems`.`like` DESC");
        $countLikeMem = 0;
        $countDisLikeMem = 0;
        $memsLikes = [];
        foreach ($allMemsGlobal as $key => $value) {
            $countLikeMem = $countLikeMem + $value->like;
            $countDisLikeMem = $countDisLikeMem + $value->dislike;
            if ($value->like > 0) array_push($memsLikes, $value->mem_file);
        }

        $vk->reply("$user->first_name, –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

–í—Å–µ–≥–æ –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏: " . num_word($countAllMemUser, ['–º–µ–º', '–º–µ–º–∞', '–º–µ–º–æ–≤']) . "
&#128077; –ü–æ—Å—Ç–∞–≤–∏–ª–∏ –õ–∞–π–∫: " . num_word($countLikeMemUser, ['–º–µ–º—É', '–º–µ–º–∞–º', '–º–µ–º–∞–º']) . "
&#128078; –ü–æ—Å—Ç–∞–≤–∏–ª–∏ –î–∏–∑–ª–∞–∫: " . num_word($countDisLikeMemUser, ['–º–µ–º—É', '–º–µ–º–∞–º', '–º–µ–º–∞–º']) . "
      
&#128202; –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:

&#128077; –ü–æ—Å—Ç–∞–≤–∏–ª–∏ –õ–∞–π–∫: " . num_word($countLikeMem, ['–º–µ–º—É', '–º–µ–º–∞–º', '–º–µ–º–∞–º']) . "
&#128078; –ü–æ—Å—Ç–∞–≤–∏–ª–∏ –î–∏–∑–ª–∞–∫: " . num_word($countDisLikeMem, ['–º–µ–º—É', '–º–µ–º–∞–º', '–º–µ–º–∞–º']) . "
", ["keyboard" => $keyboard_menu]);
        if (count($memsLikes) <= 0) {
            $vk->reply("–ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ø –ø–æ –º–µ–º–∞–º, –Ω–æ –∏—Ö –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç :(", ["keyboard" => $keyboard_menu]);
        } else {
            $attach = "";
            $dop_text = "";
            $memsLikes = array_slice($memsLikes, 0, 9);
            foreach ($memsLikes as $key => $value) {
                $mem = dirname(__FILE__) . '/photos/' . $value;
                $upload_file = $vk->uploadImage($user_id, $mem);
                if (isset($upload_file[0]) && isset($upload_file[0]["id"])) {
                    $attach .= "photo" . $upload_file[0]['owner_id'] . "_" . $upload_file[0]['id'] . ",";
                } else {
                    $dop_text .= "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä–∑–∫–µ –º–µ–º–∞ {$value}\n";
                }
            }
            $vk->reply("–í–¥–æ—Ö–Ω–æ–≤–∏—Ç–µ—Å—å —Ç–æ–ø-" . count($memsLikes) . " —Å–∞–º—ã—Ö –∑–∞–ª–∞–π–∫–∞–Ω–Ω—ã—Ö –≤—Å–µ–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –º–µ–º–æ–≤!\n\n$dop_text", ["attachment" => $attach, "keyboard" => $keyboard_menu]);
        }
    } else if (in_array($message, ["–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–π –º–µ–º"])) {
        $vk->reply("$user->first_name, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ñ–∞–π–ª (–º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏) —Å –º–µ–º–æ–º —Å –∫–æ–º–∞–Ω–¥–æ–π <<–∑–∞–≥—Ä—É–∑–∏—Ç—å>>.\n\n*–∏–º–µ–Ω–Ω–æ —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç), —Ç–∞–∫ –º–µ–º—á–∏–∫ –±—É–¥–µ—Ç —á—ë—Ç–∫–∏–º üôÉ", ["keyboard" => $keyboard_menu]);
    } else if (in_array($message, ["–∑–∞–≥—Ä—É–∑–∏—Ç—å"])) {
        $getAttachmentsPost = getAttachmentsPost();
        if ($getAttachmentsPost == []) {
            $vk->reply("–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ñ–∞–π–ª–∏–∫–∞ üòë");
        } else {
            $vk->reply("–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ " . count($getAttachmentsPost) . " —à—Ç. –º–µ–º–æ–≤! üòç");
        }
    } else {
        $payload = (object) $payload; // –º–∞—Å—Å–∏–≤ –≤ –æ–±—ä–µ–∫—Ç –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º, —á—Ç–æ–±—ã –±—ã–ª–æ –∫—Ä–∞—Å–∏–≤–æ)
        // $vk->reply(print_r($payload, 1));
        if (isset($payload->id) && isset($payload->command) && isset($payload->q) && $payload->command == "–æ—Ç–≤–µ—Ç") question($payload);
    }
}

function question($payload, $callback = [])
{
    global $vk, $keyboard_menu_hi, $button_hi, $keyboard_menu, $text_q_0, $text_q_1, $keyboard_menu_stop_q, $button_stop_q;
    if ($payload->q == true) {
        $text = $text_q_1[array_rand($text_q_1)];
        if ($callback != []) eventAnswerSnackbar($callback[2], $callback[0], $callback[1], $text);
        $vk->reply($text, ["keyboard" => $keyboard_menu_stop_q]);
    } else {
        $text = $text_q_0[array_rand($text_q_0)];
        if ($callback != []) eventAnswerSnackbar($callback[2], $callback[0], $callback[1], $text);
        $vk->reply($text, ["keyboard" => $keyboard_menu_stop_q]);
    }
    if ($payload->id == 8) {
        return $vk->reply("–í–æ—Å–ø—Ä–æ—Å–∏–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –°–∞–º–æ–µ –≤—Ä–µ–º—è –ø–æ–æ—Ä–∞—Ç—å —Å –º–µ–º–æ–≤!", ["keyboard" => $keyboard_menu]);
    }
    if ($payload->id == 1) {
        $button_ans_1 = $vk->buttonText('–ó–µ–ª–µ–Ω–æ–≥–æ', 'green', ["command" => "–æ—Ç–≤–µ—Ç", "q" => true, "id" => 2]);
        $button_ans_2 = $vk->buttonText('–°–∏–Ω–µ–≥–æ', 'blue', ["command" => "–æ—Ç–≤–µ—Ç", "q" => false, "id" => 2]);
        $button_ans_3 = $vk->buttonText('–ë–µ–ª–æ–≥–æ', 'white', ["command" => "–æ—Ç–≤–µ—Ç", "q" => false, "id" => 2]);
        $button_ans_4 = $vk->buttonText('–ö—Ä–∞—Å–Ω–æ–≥–æ', 'red', ["command" => "–æ—Ç–≤–µ—Ç", "q" => false, "id" => 2]);

        $keyboard_ans = $vk->generateKeyboard([[$button_ans_1], [$button_ans_2], [$button_ans_3], [$button_ans_4], [$button_stop_q]], false);

        $vk->reply("2. –ö–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ —Ç—Ä–∞–≤—É—à–∫–∞-–º—É—Ä–∞–≤—É—à–∫–∞? :)", ["keyboard" => $keyboard_ans]);
    }

    if ($payload->id == 2) {
        $button_ans_1 = $vk->buttonCallback('–í—Å–µ–≤–æ–ª–æ–¥', 'blue', ["command" => "–æ—Ç–≤–µ—Ç", "q" => false, "id" => 3]);
        $button_ans_2 = $vk->buttonCallback('–ù–∏–∫–∏—Ç–∞', 'blue', ["command" => "–æ—Ç–≤–µ—Ç", "q" => false, "id" => 3]);
        $button_ans_3 = $vk->buttonCallback('–ö–ª–∏–º', 'red', ["command" => "–æ—Ç–≤–µ—Ç", "q" => true, "id" => 3]);
        $button_ans_4 = $vk->buttonCallback('–ê–Ω—è', 'blue', ["command" => "–æ—Ç–≤–µ—Ç", "q" => false, "id" => 3]);

        $keyboard_ans = $vk->generateKeyboard([[$button_ans_1, $button_ans_2], [$button_ans_3], [$button_ans_4], [$button_stop_q]], false);

        $vk->reply("3. –ö–∞–∫ –∑–æ–≤—É—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞?", ["keyboard" => $keyboard_ans]);
    }

    if ($payload->id == 3) {
        $button_ans_1 = $vk->buttonCallback('–ñ–ï–°–¢–ò–ò–ò–ú!', 'white', ["command" => "–æ—Ç–≤–µ—Ç", "q" => false, "id" => 4]);
        $button_ans_2 = $vk->buttonCallback('üëª VKANTUKTI!', 'blue', ["command" => "–æ—Ç–≤–µ—Ç", "q" => true, "id" => 4]);
        $button_ans_3 = $vk->buttonCallback('–•–∏–º–∏–∫–∏', 'white', ["command" => "–æ—Ç–≤–µ—Ç", "q" => false, "id" => 4]);
        $button_ans_4 = $vk->buttonCallback('–£–º–Ω–æ-—É–º–Ω–æ', 'green', ["command" => "–æ—Ç–≤–µ—Ç", "q" => false, "id" => 4]);

        $keyboard_ans = $vk->generateKeyboard([[$button_ans_1], [$button_ans_2], [$button_ans_3, $button_ans_4]], true);

        $vk->reply("4. –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞–ª–∞ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞? =)", ["keyboard" => $keyboard_ans]);
    }

    if ($payload->id == 4) {
        $button_ans_1 = $vk->buttonText('–õ–∏–∑–∞ –ü–æ–¥–∫–ª–∞–¥—ã—à–µ–≤–∞', 'red', ["command" => "–æ—Ç–≤–µ—Ç", "q" => false, "id" => 5]);
        $button_ans_2 = $vk->buttonText('–ê—Ä—Å–µ–Ω–∏–π –ú–µ—Ç–µ–ª–µ–≤', 'red', ["command" => "–æ—Ç–≤–µ—Ç", "q" => false, "id" => 5]);
        $button_ans_3 = $vk->buttonText('–ê–Ω—è', 'green', ["command" => "–æ—Ç–≤–µ—Ç", "q" => true, "id" => 5]);
        $button_ans_4 = $vk->buttonText('–°—Ç—ë–ø–∞', 'white', ["command" => "–æ—Ç–≤–µ—Ç", "q" => false, "id" => 5]);

        $keyboard_ans = $vk->generateKeyboard([[$button_ans_1], [$button_ans_2], [$button_ans_3, $button_ans_4], [$button_stop_q]], false);

        $vk->reply("5. –ö–∞–∫–æ–π —á–µ–ª–æ–≤–µ—á–µ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –µ—Å—Ç—å —É –Ω–∞—Å –≤ –∫–æ–º–∞–Ω–¥–µ?", ["keyboard" => $keyboard_ans]);
    }

    if ($payload->id == 5) {
        $button_ans_1 = $vk->buttonText('–õ–∏–∑–∞ –ü–æ–¥–∫–ª–∞–¥—ã—à–µ–≤–∞', 'red', ["command" => "–æ—Ç–≤–µ—Ç", "q" => false, "id" => 6]);
        $button_ans_2 = $vk->buttonText('–õ–∏–∑–∞ –ü–æ–¥–∫–ª–∞–¥—ã—à–µ–≤–∞', 'red', ["command" => "–æ—Ç–≤–µ—Ç", "q" => false, "id" => 6]);
        $button_ans_3 = $vk->buttonText('–õ–∏–∑–∞ –ü–æ–¥–∫–ª–∞–¥—ã—à–µ–≤', 'green', ["command" => "–æ—Ç–≤–µ—Ç", "q" => false, "id" => 6]);
        $button_ans_4 = $vk->buttonText('–ü–∞–≤–µ–ª –î—É—Ä–æ–≤', 'red', ["command" => "–æ—Ç–≤–µ—Ç", "q" => true, "id" => 6]);

        $keyboard_ans = $vk->generateKeyboard([[$button_ans_1], [$button_ans_2], [$button_ans_3, $button_ans_4], [$button_stop_q]], false);

        $vk->reply("6. –ö—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º –í–ö–æ–Ω—Ç–∞–∫—Ç–µ? –ù–µ, –Ω—É –∞ –≤–¥—Ä—É–≥ –Ω–µ –∑–Ω–∞–µ—Ç–µ)", ["keyboard" => $keyboard_ans]);
    }

    if ($payload->id == 6) {
        $button_ans_1 = $vk->buttonCallback('10¬≤', 'green', ["command" => "–æ—Ç–≤–µ—Ç", "q" => true, "id" => 7]);
        $button_ans_2 = $vk->buttonCallback('100', 'red', ["command" => "–æ—Ç–≤–µ—Ç", "q" => true, "id" => 7]);
        $button_ans_3 = $vk->buttonCallback('999 ‚Äî 899', 'blue', ["command" => "–æ—Ç–≤–µ—Ç", "q" => true, "id" => 7]);
        $button_ans_4 = $vk->buttonCallback('50 * 6 ‚Äî 25 * 8', 'white', ["command" => "–æ—Ç–≤–µ—Ç", "q" => true, "id" => 7]);

        $keyboard_ans = $vk->generateKeyboard([[$button_ans_1], [$button_ans_2], [$button_ans_3, $button_ans_4], [$button_stop_q]], false);

        $vk->reply("–ê —Ç–µ–ø–µ—Ä—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ :(\n7. –†–µ—à–∏—Ç–µ –ø—Ä–∏–º–µ—Ä: 12‚Å∂‚Åª‚Å¥ ‚Äî 44 = ?", ["keyboard" => $keyboard_ans]);
    }
    if ($payload->id == 7) {
        $button_ans_1 = $vk->buttonText('12', 'green', ["command" => "–æ—Ç–≤–µ—Ç", "q" => false, "id" => 8]);
        $button_ans_2 = $vk->buttonText('34', 'red', ["command" => "–æ—Ç–≤–µ—Ç", "q" => true, "id" => 8]);
        $button_ans_3 = $vk->buttonText('123', 'green', ["command" => "–æ—Ç–≤–µ—Ç", "q" => false, "id" => 8]);
        $button_ans_4 = $vk->buttonText('234', 'green', ["command" => "–æ—Ç–≤–µ—Ç", "q" => false, "id" => 8]);

        $keyboard_ans = $vk->generateKeyboard([[$button_ans_1, $button_ans_2], [$button_ans_3, $button_ans_4], [$button_stop_q]], false);

        $vk->reply("–ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ, –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å!\n8. –†–∞—Å—Å—Ç–∞–≤—å—Ç–µ –≤—Å–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è: —É–∫–∞–∂–∏—Ç–µ —Ü–∏—Ñ—Ä—É(-—ã), –Ω–∞ –º–µ—Å—Ç–µ –∫–æ—Ç–æ—Ä–æ–π(-—ã—Ö) –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–∞(-—ã) —Å—Ç–æ—è—Ç—å –∑–∞–ø—è—Ç–∞—è(-—ã–µ).\n\n–ù–∞–ø–ª–µ—Å–∫–∞–≤—à–∏—Å—å –≤–¥–æ–≤–æ–ª—å (1) –∏ (2) –ø–æ–ø—Ä—ã–≥–∞–≤ –≤ –≤–æ–¥—É —Å –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–æ–≥–æ —Ä–∂–∞–≤–æ–≥–æ –∫—É–∑–æ–≤–∞ (3) –Ω–µ–≤–µ–¥–æ–º–æ –∫–∞–∫ –æ—á—É—Ç–∏–≤—à–µ–≥–æ—Å—è –≤ –æ–∑–µ—Ä–µ (4) –º–∞–ª—å—á–∏—à–∫–∏ —É—Å—Ç—Ä–æ–∏–ª–∏—Å—å —Å —É–¥–æ—á–∫–∞–º–∏ –≤–æ–∑–ª–µ –∫–∞–º—ã—à–µ–π.", ["keyboard" => $keyboard_ans]);
    }
}

function getAttachmentsPost()
{
    global $vk, $user_id, $peer_id, $user, $data;
    $attachemnts = $vk->request("messages.getByConversationMessageId", ["peer_id" => $peer_id, "conversation_message_ids" => $data->object->conversation_message_id]);
    $attachemnts_array = [];
    if (!isset($attachemnts["error"])) {
        foreach ($attachemnts["items"][0]["attachments"] as $key => $value) {
            if ($value["type"] == "doc") {
                $attachment_owner_id = $value["doc"]["owner_id"];
                $attachment_id = $value["doc"]["id"];
                $attachment_title = $value["doc"]["title"];
                if (isset($value["doc"]["access_key"])) {
                    $attachment_access_key = "_" . $value["doc"]["access_key"];
                } else {
                    $attachment_access_key = "";
                }
                $doc_url = "doc{$attachment_owner_id}_{$attachment_id}{$attachment_access_key}";

                $hash = bin2hex(random_bytes(5));
                $path = "./photos/" . $hash . "." . $value["doc"]["ext"];

                file_put_contents($path, file_get_contents($value["doc"]["url"]));
                // $vk->reply($value["doc"]["ext"] . " ‚Äî " . $value["doc"]["url"] . " ‚Äî $path");

                array_push($attachemnts_array, ["type" => "doc", "value" => $doc_url]);
            }
        }
        return $attachemnts_array;
    } else {
        return $attachemnts_array;
    }
}

function eventAnswerSnackbar($event_id, $peer_id, $user_id, $text)
{
    global $vk;
    return $vk->request('messages.sendMessageEventAnswer', [
        'event_id' => $event_id,
        'user_id' => $user_id,
        'peer_id' => $peer_id,
        'event_data' => json_encode([
            'type' => 'show_snackbar',
            'text' => $text
        ])
    ]);
}

function regUser($user_id)
{
    global $vk;
    $user = R::findOne('users', 'vk_id = ?', [$user_id]);
    if ($user == null) {
        $userInfo = $vk->userInfo($user_id, [
            "fields" => "id,first_name,last_name,sex",
            "extended" => 1
        ]);

        $NewUser = R::dispense("users");
        $NewUser->vk_id = $user_id;
        $NewUser->sex = $userInfo["sex"];
        $NewUser->first_name = $userInfo["first_name"];
        $NewUser->last_name = $userInfo["last_name"];
        $NewUser->date_create = date('Y-m-d H:i:s');
        $NewUser->date_update = date('Y-m-d H:i:s');
        R::store($NewUser);
    } else {
        if (($user->time_update + 3600 * 24) > time()) { // –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑ –≤ 24 —á–∞—Å–∞ (–≤—Ä–æ–¥–µ –≤–µ—Ä–Ω–æ –ø–æ–¥—Å—á–∏—Ç–∞–ª). –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —é–∑–µ—Ä–∞
            $userInfo = $vk->userInfo($user_id, [
                "fields" => "id,first_name,last_name,sex",
                "extended" => 1
            ]);


            $user->sex = $userInfo["sex"];
            $user->first_name = $userInfo["first_name"];
            $user->last_name = $userInfo["last_name"];
            R::store($user);
        }
        $user->date_update = date('Y-m-d H:i:s');
        R::store($user);
    }
    $user = R::findOne('users', 'vk_id = ?', [$user_id]);
    return $user;
}

function num_word($value, $words, $show = true)
{
    $num = $value % 100;
    if ($num > 19) {
        $num = $num % 10;
    }

    $out = ($show) ?  $value . ' ' : '';
    switch ($num) {
        case 1:
            $out .= $words[0];
            break;
        case 2:
        case 3:
        case 4:
            $out .= $words[1];
            break;
        default:
            $out .= $words[2];
            break;
    }

    return $out;
}
